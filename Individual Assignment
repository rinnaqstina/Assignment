#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>
#include <semaphore.h>

#define NUM_CHILD 10//limit of 10 for creating child process

int num_child = 0;
pid_t child_pids[NUM_CHILD];
int pipe_fds[NUM_CHILD][2]://pipes for passing message from parent to child

sem_t sem;

void parent_process()
{
  sleep (1);
  fflush(stdin);
  printf("\nEnter message to send to children: ");
  char message [100];
  
  if (fgets(message, sizeof (message), stdin) == NULL)
  {
    printf("\nError reading message."):
    exit(1);
  }

  sem_wait(&sem);
  for(int 1=0; 1 < NUM_CHILD; 1++)
  {
    printf('parent message to child %d\n", i+1);
    write(pipe _fds[i][1], message, sizeof(message));
    sleep (1);
  }
  sem _post (8sem);
}

void child _process(int id)
{
  sem_wait(&sem);
  printf("Child %d reading from pipe\n", id+1);
  
  char message[100];
  read(pipe_fds[id][0], message, sizeof(message));
  printf "Child %d received message: %s", id+1, message);
  sleep(1);
  sem_post(&sem);
}

//function for interupt handler
void sigint _handler(int sig)
{
  printf("\nProgram terminated.\n");
  sem _destroy(&sem);
  exit (o);
}

int mains()
{
  signal(SIGINT,sigint _handler);
  sem_init(&sem, 0, 1);
  for (int 1 = 0; 1 < NUM _CHILD; 1++)
  {
    if (pipe (pipe_fds [i]) == -1)
    {
      printf("Error creating pipe for child %d\n", i+1);
      exit (1);
    }
    pid_t pid = fork();//create child usine fork function
    //error handling when error creating pipes
    if (pid == -1)
    {
      printf "Error forking child %d\n", i+1):
      exit (1);
    }
    else if (pid == 0)
    {
      child_process(i);
      exit (0);
    }
    else
    {
      child_pids[i] = pid;
      num_child++;

      if (i == NUM CHILD-1)
      {
        parent_process();
      }
    }
  }
  printf("\nAll child processes finished! Exiting program... \n");
  return 0;
}
